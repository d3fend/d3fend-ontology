PREFIX ocsf: <https://schema.ocsf.io/1.1.0-dev/ontology/>
PREFIX d3f: <http://d3fend.mitre.org/ontologies/d3fend.owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX jsonschema: <https://www.w3.org/2019/wot/json-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>

# {
#     "$id": "https://schema.ocsf.io/dictionary-attribute.schema.json",
#     "$schema": "https://json-schema.org/draft/2020-12/schema",
#     "title": "Dictionary Attribute",
#     "type": "object",
#     "required": [
#         "caption",
#         "description",
#         "type"
#     ],
#     "properties": {
#         "@deprecated": {
#             "$ref": "deprecated.schema.json"
#         },
#         "caption": {
#             "type": "string",
#             "description": "A short, more specific identifier for this attribute."
#         },
#         "description": {
#             "type": "string",
#             "description": "The description of the attribute."
#         },
#         "enum": {
#             "type": "object",
#             "description": "An enumeration of options for this attribute.",
#             "additionalProperties": {
#                 "type": "object",
#                 "required": [
#                     "caption"
#                 ],
#                 "properties": {
#                     "caption": {
#                         "type": "string",
#                         "description": "The caption of this enum value."
#                     },
#                     "description": {
#                         "type": "string",
#                         "description": "The description of this enum value."
#                     },
#                     "additionalProperties": false
#                 }
#             }
#         },
#         "sibling": {
#             "type": "string",
#             "description": "Sibling attributes are string attributes paired with a source enum id attribute. If the source attribute maps to a defined enumeration value, the sibling attribute should be populated with the label of the enum. In the case that the source attribute is `Other`, the sibling attribute is populated with a custom label."
#         },
#         "type": {
#             "type": "string",
#             "description": "The data type for this attribute."
#         },
#         "is_array": {
#             "type": "boolean",
#             "description": "A flag used when the attribute represents an array of values rather than a single value."
#         }
#     },
#     "additionalProperties": false
# }

GENERATE <https://schema.ocsf.io/1.1.0-dev/attribute> ( ?source, ?attributeIRI, ?attributeKey ) {
  ?attributeIRI a ?propertyType ;
    rdfs:label ?caption ;
    dcterms:description ?description ;
    rdfs:range ?typeIRI .

  # I think these should be owl:NamedIndividual(s)?

  # ocsf:LogonTypeId a owl:Class, owl:NamedIndividual ;

  GENERATE {
    ?attributeIRI jsonschema:enum ?enumCaption .
  } ITERATOR iter:JSONListKeys(?enum) as ?enumKey
  WHERE {
    BIND ( fun:JSONPath(?enum, "$.{?enumKey}.caption") AS ?enumCaption )
    BIND ( fun:JSONPath(?enum, "$.{?enumKey}.description") AS ?enumDescription )
    # BIND ( IRI("https://schema.ocsf.io/1.1.0-dev/ontology/" + fun:camelCase(?enumCaption)) AS ?enumIRI )
  } .
}

ITERATOR iter:JSONPath(?source, "$", "$.caption", "$.description", "$.enum", "$.sibling", "$.type", "$.is_array") AS ?attribute ?caption ?description ?enum ?sibling ?type ?is_array 

WHERE {  
  # primitive types are mapped to owl:DatatypeProperty, all others are mapped to owl:ObjectProperty
  
  BIND(
       COALESCE(IF(STRENDS(?type, "_t"), owl:DatatypeProperty, 1/0),
		owl:ObjectProperty
		) AS ?propertyType
       )

  OPTIONAL { ?class ocsf:name ?type . }

  # If the type is primitive then use its IRI otherwise use the optionally bound class IRI

  BIND(
       COALESCE(IF(STRENDS(?type, "_t"), IRI("https://schema.ocsf.io/1.1.0-dev/ontology/" + ?type), 1/0),
		?class
		) AS ?typeIRI
       )

}
