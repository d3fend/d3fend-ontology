PREFIX ocsf: <https://schema.ocsf.io/1.3.0/ontology/>
PREFIX d3f: <http://d3fend.mitre.org/ontologies/d3fend.owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX jsonschema: <https://www.w3.org/2019/wot/json-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>

# TODO: Delete! Keeping for now, but doesn't appear this is
# viable path as the graphs built are not dependent on the
# prior graphs by testing. You can get different aspects done
# But a creation in one can't be a dependent on another or
# it fails.  So marshalling in from the graph property
# defined in sparql-generate-conf.json is needed and continually
# adding pieces together to make a graph for next step must
# be done external, as the output from any given step is
# just for the GENERATE and doesn't include prior graph.
GENERATE {
  ?versionURI a owl:Ontology ;
    owl:imports <http://d3fend.mitre.org/ontologies/d3fend.owl> .

  GENERATE <https://schema.ocsf.io/1.3.0/glue> () .
  GENERATE <https://schema.ocsf.io/1.3.0/categories> () .
  GENERATE <https://schema.ocsf.io/1.3.0/events> () .
#  GENERATE <https://schema.ocsf.io/1.3.0/dictionary> () .
#  GENERATE <https://schema.ocsf.io/1.3.0/objects> () .
}

SOURCE <https://github.com/ocsf/ocsf-schema/raw/1.3.0/version.json>
AS ?version

WHERE {
  BIND(IRI(CONCAT("https://schema.ocsf.io/", fun:JSONPath(?version, "$.version"), "/ontology/")) AS ?versionURI)
}
